/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
ル	、 
kana_ru_comma,kruc

ン	。
kana_n_period,knp

ク	（
kana_ku_curl_open,kkuco

ス	）
kana_su_curl_close,ksucc

ト	「
kana_to_double_quote_open,ktodqo

テ	」
kana_te_double_quote_close,ktedqc

ノ	・
kana_no_middle_dot,knomd

キ	？
kana_ki_question_mark,kkiqm

コ	！
kana_ko_exclamation_mark,kkoem
*/
/ {
  behaviors {
    #include "macros.dtsi"

    kruc: kana_ru_comma {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_RU_COMMA";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp LS(COMMA)>;
        mods = <(MOD_RSFT)>;
    };
    knp: kana_n_period {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_N_DOT";
        #binding-cells = <0>;
        bindings = <&kp Y>, <&kp LS(DOT)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    kkuco: kana_ku_curl_open {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_KU_CURL_OPEN";
        #binding-cells = <0>;
        bindings = <&kp H>, <&kp LA(RS(N9))>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ksucc: kana_su_curl_close {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_SU_CURL_CLOSE";
        #binding-cells = <0>;
        bindings = <&kp R>, <&kp LA(RS(N0))>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ktodqo: kana_to_double_quote_open {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_TO_DOUBLE_QUOTE_OPEN";
        #binding-cells = <0>;
        bindings = <&kp S>, <&kp LS(EQUAL)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ktedqc: kana_te_double_quote_close {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_TE_DOUBLE_QUOTE_CLOSE";
        #binding-cells = <0>;
        bindings = <&kp W>, <&kp LS(LEFT_BRACKET)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    knomd: kana_no_middle_dot {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_NO_MIDDLE_DOT";
        #binding-cells = <0>;
        bindings = <&kp K>, <&kp LS(SLASH)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    kkiqm: kana_ki_question_mark {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_KI_QUESTION_MARK";
        #binding-cells = <0>;
        bindings = <&kp G>, <&kp LA(RS(SLASH))>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    kkoem: kana_ko_exclamation_mark {
        compatible = "zmk,behavior-mod-morph";
        label = "KANA_KO_EXCLAMATION_MARK";
        #binding-cells = <0>;
        bindings = <&kp B>, <&kp LA(RS(N1))>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
            &kp ESC             &kp PLUS    &kp QUESTION    &kp ASTERISK    &kp AMPERSAND   &kp PERCENT &kp C_PP                                                                                                                &kp CAPS        &kp DOLLAR  &kp COLON   &kp EQUAL       &kp EXCLAMATION &kp MINUS           &kp DEL
            &kp RIGHT_BRACKET   &kp Q       &kp W           &kp E           &kp R           &kp T       &kp RIGHT_PARENTHESIS                                                                                                   &kp RIGHT_BRACE &kp Y       &kp U       &kp I           &kp O           &kp P               &kp GREATER_THAN
            &kp LEFT_BRACKET    &lt 6 A     &lt 8 S         &kp D           &kp F           &kp G       &kp LEFT_PARENTHESIS                &sk LEFT_GUI        &to 0               &to 1           &sk RIGHT_ALT               &kp LEFT_BRACE  &kp H       &kp J       &kp K           &lt 5 L         &lt 7 DOUBLE_QUOTES &kp LESS_THAN
            &kp PIPE            &kp Z       &lt 4 X         &kp C           &kp V           &kp B                                                               &kp LG(SPACE)       &kp RA(GRAVE)                                              &kp N       &kp M       &kp COMMA       &lt 4 DOT       &lt 9 SLASH         &kp CARET
            &kp LC(SPACE)       &kp AT_SIGN &kp HASH        &caps_word      &kp BSPC                                            &kp SPACE   &sk LEFT_CONTROL    &kp SEMI            &kp UNDERSCORE  &sk RIGHT_SHIFT &kp ENTER                               &kp TAB     &kp BACKSLASH   &kp APOSTROPHE  &kp GRAVE           &kp TILDE
            >;
        };

        layer_ja1 {
            bindings = <
            &trans           &kp M              &kp J     &kp COMMA      &kp N6     &trans      &trans                                                                                                                &trans             &trans              &kp O      &kp SEMICOLON    &kp N7     &kp MINUS    &trans
            &kp BACKSLASH    &kp P              &kp N5    &kkoem         &kkiqm     &kp V       &trans                                                                                                                &trans             &kp SINGLE_QUOTE    &knomd     &kp Z            &kp N8     &kp N2       &kp C
            &kp LS(N0)       &lt 6 UNDERSCORE   &lt 8 T   &kruc          &knp       &kp U       &kp RIGHT_BRACE            &trans               &trans               &trans               &trans                      &kp RS(BACKSLASH)  &kp N3              &kp E      &kp N4           &lt 5 D    &lt 7 Q      &kp X
            &kp N0           &kp A              &kp I     &kp N9         &ktedqc    &kp TILDE                                                   &trans               &trans                                                              &kp L               &ktodqo    &kkuco           &ksucc     &kp F        &trans
            &trans           &kp PLUS           &kp N1    &kp LESS_THAN  &trans                                  &trans    &macro_sticky_cmd    &kp RIGHT_BRACKET    &kp LEFT_BRACKET    &kp RIGHT_SHIFT    &trans                                           &trans     &kp GREATER_THAN &kp N      &kp SLASH    &trans
            >;
        };

        layer_ja2 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_reserved__3 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_bluetooth {
            bindings = <
 &bt BT_CLR        &trans        &trans        &trans        &trans        &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
     &trans        &trans        &trans        &trans        &trans        &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
     &trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_SEL 4            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
     &trans        &trans        &trans        &trans        &trans        &trans                            &trans                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
     &trans        &trans        &trans        &trans        &trans                          &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_num {
            bindings = <     
 &trans     &trans    &trans     &trans    &trans  &trans   &trans                                                  &trans               &trans               &trans           &trans  &trans  &trans                                  &trans
 &trans  &kp SLASH  &kp STAR  &kp MINUS  &kp PLUS  &trans   &trans                                                  &trans  &kp RC(RIGHT_SHIFT)    &kp RS(RIGHT_ALT)  &kp RIGHT_SHIFT  &trans  &kp RC(RS(RIGHT_ALT))                   &trans
 &trans     &kp N4    &kp N3     &kp N2    &kp N1  &kp N0   &trans          &trans  &trans  &trans  &trans          &trans    &kp RC(RIGHT_ALT)    &kp RA(RIGHT_GUI)    &kp RIGHT_ALT  &trans  &kp RC(RA(RIGHT_GUI))        &kp RIGHT_CONTROL
 &trans     &kp N9    &kp N8     &kp N7    &kp N6  &kp N5                           &trans  &trans                            &kp RC(RIGHT_GUI)  &kp RG(RIGHT_SHIFT)    &kp RIGHT_GUI  &trans  &kp RC(RG(RIGHT_SHIFT))  &kp RS(RA(RIGHT_GUI))
 &trans     &trans    &trans     &trans    &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                            &trans           &trans  &trans  &trans                                  &trans
            >;
        };

        layer_mod_l {
            bindings = <
 &trans  &trans          &trans              &trans              &trans                  &trans                &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &kp LEFT_SHIFT    &kp LS(LEFT_ALT)  &kp LC(LEFT_SHIFT)    &kp LC(LS(LEFT_ALT))      &kp LEFT_CONTROL                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans    &kp LEFT_ALT    &kp LA(LEFT_GUI)    &kp LC(LEFT_ALT)    &kp LC(LA(LEFT_GUI))  &kp LS(LA(LEFT_GUI))          &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans    &kp LEFT_GUI  &kp LG(LEFT_SHIFT)    &kp LC(LEFT_GUI)  &kp LC(LG(LEFT_SHIFT))                                        &trans  &trans                          &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans          &trans              &trans              &trans                                                &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_mod_r {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                   &trans                   &trans               &trans               &trans           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                        &kp RIGHT_CONTROL    &kp RC(RS(RIGHT_ALT))  &kp RC(RIGHT_SHIFT)    &kp RS(RIGHT_ALT)  &kp RIGHT_SHIFT  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans          &kp RS(RA(RIGHT_GUI))    &kp RC(RA(RIGHT_GUI))    &kp RC(RIGHT_ALT)    &kp RA(RIGHT_GUI)    &kp RIGHT_ALT  &trans  &trans  
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans  &trans                                         &kp RC(RG(RIGHT_SHIFT))    &kp RC(RIGHT_GUI)  &kp RG(RIGHT_SHIFT)    &kp RIGHT_GUI  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans                                                               &trans               &trans           &trans  &trans  &trans
            >;
        };

        layer_arrow {
            bindings = <
               &trans                 &trans   &trans          &trans              &trans              &trans  &trans                                                  &trans        &trans       &trans        &trans         &trans         &trans  &trans
               &trans    &kp LC(LS(LEFT_ALT))  &trans  &kp LEFT_SHIFT    &kp LS(LEFT_ALT)  &kp LC(LEFT_SHIFT)  &trans                                                  &trans        &trans  &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN         &trans  &trans
     &kp LEFT_CONTROL    &kp LC(LA(LEFT_GUI))  &trans    &kp LEFT_ALT    &kp LA(LEFT_GUI)    &kp LC(LEFT_ALT)  &trans          &trans  &trans  &trans  &trans          &trans  &kp RC(LEFT)     &kp LEFT      &kp DOWN      &kp RIGHT  &kp RC(RIGHT)  &trans
 &kp LS(LA(LEFT_GUI))  &kp LC(LG(LEFT_SHIFT))  &trans    &kp LEFT_GUI  &kp LG(LEFT_SHIFT)    &kp LC(LEFT_GUI)                          &trans  &trans                                &trans       &trans        &trans         &trans         &trans  &trans
               &trans                 &trans   &trans          &trans              &trans                              &trans  &trans  &trans  &trans  &trans  &trans                             &trans        &trans         &trans         &trans  &trans
            >;
        };

        layer_function {
            bindings = <
    &trans   &trans   &trans   &trans  &trans  &trans  &trans                                                                     &trans                   &trans               &trans               &trans           &trans  &trans  &trans
    &trans  &kp F12  &kp F11  &kp F10  &kp F9  &trans  &trans                                                          &kp RIGHT_CONTROL    &kp RC(RS(RIGHT_ALT))  &kp RC(RIGHT_SHIFT)    &kp RS(RIGHT_ALT)  &kp RIGHT_SHIFT  &trans  &trans
    &trans   &kp F4   &kp F3   &kp F2  &kp F1  &trans  &trans              &trans  &trans  &trans  &trans          &kp RS(RA(RIGHT_GUI))    &kp RC(RA(RIGHT_GUI))    &kp RC(RIGHT_ALT)    &kp RA(RIGHT_GUI)    &kp RIGHT_ALT  &trans  &trans  
    &trans   &kp F8   &kp F7   &kp F6  &kp F5  &trans                              &trans  &trans                                         &kp RC(RG(RIGHT_SHIFT))    &kp RC(RIGHT_GUI)  &kp RG(RIGHT_SHIFT)    &kp RIGHT_GUI  &trans  &trans
    &trans   &trans   &trans   &trans  &trans                      &trans  &trans  &trans  &trans  &trans  &trans                                                               &trans               &trans           &trans  &trans  &trans
            >;
        };

    };
};